apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "13"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-ebook-chat-system
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smart-ebook-chat-system
        app.kubernetes.io/component: database
        app.kubernetes.io/version: "13"
    spec:
      serviceAccountName: smart-ebook-chat
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:13-alpine
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        envFrom:
        - secretRef:
            name: database-secrets
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgresql-storage
        persistentVolumeClaim:
          claimName: postgresql-pvc
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: postgresql
    protocol: TCP
    name: postgresql
  selector:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: database

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "6.2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-ebook-chat-system
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smart-ebook-chat-system
        app.kubernetes.io/component: cache
        app.kubernetes.io/version: "6.2"
    spec:
      serviceAccountName: smart-ebook-chat
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:6.2-alpine
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        envFrom:
        - secretRef:
            name: redis-secrets
        command: ["redis-server"]
        args: 
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        - "--appendonly"
        - "yes"
        - "--appendfsync"
        - "everysec"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - "$(REDIS_PASSWORD)"
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - "$(REDIS_PASSWORD)"
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: redis
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: cache

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qdrant
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: vector-db
    app.kubernetes.io/version: "v1.8.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-ebook-chat-system
      app.kubernetes.io/component: vector-db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smart-ebook-chat-system
        app.kubernetes.io/component: vector-db
        app.kubernetes.io/version: "v1.8.0"
    spec:
      serviceAccountName: smart-ebook-chat
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: qdrant
        image: qdrant/qdrant:v1.8.0
        ports:
        - name: http
          containerPort: 6333
          protocol: TCP
        - name: grpc
          containerPort: 6334
          protocol: TCP
        envFrom:
        - secretRef:
            name: qdrant-secrets
        env:
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        - name: QDRANT__LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: qdrant-storage
          mountPath: /qdrant/storage
      volumes:
      - name: qdrant-storage
        persistentVolumeClaim:
          claimName: qdrant-pvc
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: qdrant
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: vector-db
spec:
  type: ClusterIP
  ports:
  - port: 6333
    targetPort: http
    protocol: TCP
    name: http
  - port: 6334
    targetPort: grpc
    protocol: TCP
    name: grpc
  selector:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: vector-db

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: storage
    app.kubernetes.io/version: "RELEASE.2023-03-20T20-16-18Z"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smart-ebook-chat-system
      app.kubernetes.io/component: storage
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smart-ebook-chat-system
        app.kubernetes.io/component: storage
        app.kubernetes.io/version: "RELEASE.2023-03-20T20-16-18Z"
    spec:
      serviceAccountName: smart-ebook-chat
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: minio
        image: minio/minio:RELEASE.2023-03-20T20-16-18Z
        ports:
        - name: api
          containerPort: 9000
          protocol: TCP
        - name: console
          containerPort: 9001
          protocol: TCP
        envFrom:
        - secretRef:
            name: minio-secrets
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: MINIO_SECRET_KEY
        command: ["minio"]
        args: 
        - "server"
        - "/data"
        - "--console-address"
        - ":9001"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /minio/health/live
            port: api
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: api
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: minio-storage
          mountPath: /data
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: smart-ebook-chat
  labels:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: storage
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: api
    protocol: TCP
    name: api
  - port: 9001
    targetPort: console
    protocol: TCP
    name: console
  selector:
    app.kubernetes.io/name: smart-ebook-chat-system
    app.kubernetes.io/component: storage 