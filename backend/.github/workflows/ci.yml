name: SECS Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: secs_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/collections || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        command: server /data --console-address ":9001"
    
    defaults:
      run:
        working-directory: backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 30
        curl -f http://localhost:6333/collections || exit 1
        curl -f http://localhost:9000/minio/health/live || exit 1
        redis-cli -h localhost -p 6379 ping
    
    - name: Set up environment variables
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/secs_test_db
        REDIS_URL=redis://localhost:6379
        QDRANT_URL=http://localhost:6333
        MINIO_ENDPOINT=localhost:9000
        MINIO_ACCESS_KEY=minioadmin
        MINIO_SECRET_KEY=minioadmin
        SECRET_KEY=test-secret-key-for-ci
        TESTING=true
        EOF
    
    - name: Run database migrations
      run: poetry run alembic upgrade head
    
    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ \
          -v \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --junitxml=test-results-unit.xml
    
    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ \
          -v \
          --junitxml=test-results-integration.xml \
          -m integration
    
    - name: Run security tests
      run: |
        poetry run pytest tests/ \
          -v \
          -k security \
          --junitxml=test-results-security.xml
        # Install and run bandit for security linting
        poetry run pip install bandit
        poetry run bandit -r app/ -f json -o security-report.json || true
    
    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          backend/test-results-*.xml
          backend/coverage.xml
          backend/security-report.json
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: backend/test-results-*.xml

  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run linting
      run: |
        # Install linting tools
        poetry run pip install flake8 black isort mypy
        
        # Run formatters and linters
        poetry run black --check app tests
        poetry run isort --check-only app tests
        poetry run flake8 app tests
        poetry run mypy app

  security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run Bandit security scan
      run: |
        poetry run pip install bandit
        poetry run bandit -r app/ -f json -o bandit-report.json
    
    - name: Run Safety dependency scan
      run: |
        poetry run pip install safety
        poetry run safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: secs_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
      
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
        command: server /data --console-address ":9001"
    
    defaults:
      run:
        working-directory: backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Set up environment
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/secs_test_db
        REDIS_URL=redis://localhost:6379
        QDRANT_URL=http://localhost:6333
        MINIO_ENDPOINT=localhost:9000
        MINIO_ACCESS_KEY=minioadmin
        MINIO_SECRET_KEY=minioadmin
        SECRET_KEY=test-secret-key-for-ci
        EOF
    
    - name: Run database migrations
      run: poetry run alembic upgrade head
    
    - name: Start backend server
      run: |
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        poetry run locust \
          -f tests/performance/locustfile.py \
          --headless \
          --users 30 \
          --spawn-rate 5 \
          --run-time 2m \
          --host http://localhost:8000 \
          --html performance-report.html \
          --csv performance-results
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          backend/performance-report.html
          backend/performance-results*.csv

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push'
    
    defaults:
      run:
        working-directory: backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend
        push: false
        tags: secs-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm secs-backend:${{ github.sha }} python -c "import app; print('Docker image works!')"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl, helm, or cloud provider CLI commands

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl, helm, or cloud provider CLI commands 